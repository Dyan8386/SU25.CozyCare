// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using CozyCare.JobService.Domain.Entities;
using Microsoft.EntityFrameworkCore;

namespace CozyCare.JobService.Infrastructure.DBContext;

public partial class CozyCareJobDbContext : DbContext
{
    public CozyCareJobDbContext()
    {
    }

    public CozyCareJobDbContext(DbContextOptions<CozyCareJobDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<TaskClaim> TaskClaims { get; set; }

    public virtual DbSet<TaskClaimStatus> TaskClaimStatuses { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"))
        .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=LEGION\\SQLEXPRESS;Initial Catalog=CozyCare.JobDb;Persist Security Info=True;User ID=sa;Password=1234567890;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.reviewId).HasName("PK__Reviews__2ECD6E04D1249F87");

            entity.Property(e => e.reviewDate).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<TaskClaim>(entity =>
        {
            entity.HasKey(e => e.claimId).HasName("PK__TaskClai__01BDF9D3E573D8E7");

            entity.Property(e => e.claimDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.status).WithMany(p => p.TaskClaims)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Claims_Status");
        });

        modelBuilder.Entity<TaskClaimStatus>(entity =>
        {
            entity.HasKey(e => e.statusId).HasName("PK__TaskClai__36257A18A4889163");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}