// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using CozyCare.DAL.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace CozyCare.DAL.DBContext;

public partial class CozyCareContext : DbContext
{
    public CozyCareContext()
    {
    }

    public CozyCareContext(DbContextOptions<CozyCareContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<AccountStatus> AccountStatuses { get; set; }

    public virtual DbSet<AssignmentStatus> AssignmentStatuses { get; set; }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<BookingDetail> BookingDetails { get; set; }

    public virtual DbSet<BookingStatus> BookingStatuses { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Housekeeper> Housekeepers { get; set; }

    public virtual DbSet<HousekeeperAvailability> HousekeeperAvailabilities { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PaymentStatus> PaymentStatuses { get; set; }

    public virtual DbSet<Promotion> Promotions { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<ScheduleAssignment> ScheduleAssignments { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<ServiceDetail> ServiceDetails { get; set; }

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-AS8ROSV\\PHAMDINHNGAN;Initial Catalog=CozyCare;Persist Security Info=True;User ID=sa;Password=1234567890;Encrypt=False");

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"))
        .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.accountId).HasName("PK__Accounts__F267251E4FE0E3F0");

            entity.Property(e => e.createdDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.createdByNavigation).WithMany(p => p.InversecreatedByNavigation).HasConstraintName("FK_Accounts_CreatedBy");

            entity.HasOne(d => d.role).WithMany(p => p.Accounts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Accounts_Roles");

            entity.HasOne(d => d.status).WithMany(p => p.Accounts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Accounts_AccountStatuses");

            entity.HasOne(d => d.updatedByNavigation).WithMany(p => p.InverseupdatedByNavigation).HasConstraintName("FK_Accounts_UpdatedBy");
        });

        modelBuilder.Entity<AccountStatus>(entity =>
        {
            entity.HasKey(e => e.statusId).HasName("PK__AccountS__36257A181467A4C7");
        });

        modelBuilder.Entity<AssignmentStatus>(entity =>
        {
            entity.HasKey(e => e.statusId).HasName("PK__Assignme__36257A1820090432");
        });

        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.bookingId).HasName("PK__Bookings__C6D03BCDDC640711");

            entity.Property(e => e.bookingDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.bookingStatus).WithMany(p => p.Bookings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Bookings_BookingStatuses");

            entity.HasOne(d => d.customer).WithMany(p => p.Bookings).HasConstraintName("FK_Bookings_Accounts");

            entity.HasOne(d => d.paymentStatus).WithMany(p => p.Bookings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Bookings_PaymentStatuses");

            entity.HasOne(d => d.promotionCodeNavigation).WithMany(p => p.Bookings)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Bookings_Promotions");
        });

        modelBuilder.Entity<BookingDetail>(entity =>
        {
            entity.HasKey(e => e.detailId).HasName("PK__BookingD__83077859671931D5");

            entity.HasOne(d => d.booking).WithMany(p => p.BookingDetails).HasConstraintName("FK_BookingDetails_Bookings");

            entity.HasOne(d => d.service).WithMany(p => p.BookingDetails).HasConstraintName("FK_BookingDetails_Services");
        });

        modelBuilder.Entity<BookingStatus>(entity =>
        {
            entity.HasKey(e => e.statusId).HasName("PK__BookingS__36257A182D330463");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.categoryId).HasName("PK__Categori__23CAF1D84D0201AE");

            entity.Property(e => e.createdDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.isActive).HasDefaultValue(true);
        });

        modelBuilder.Entity<Housekeeper>(entity =>
        {
            entity.HasKey(e => e.housekeeperId).HasName("PK__Housekee__C5847E00520212B6");

            entity.HasOne(d => d.account).WithMany(p => p.Housekeepers).HasConstraintName("FK_Housekeepers_Accounts");
        });

        modelBuilder.Entity<HousekeeperAvailability>(entity =>
        {
            entity.HasKey(e => e.availabilityId).HasName("PK__Housekee__BFEBC05503BC4493");

            entity.HasOne(d => d.housekeeper).WithMany(p => p.HousekeeperAvailabilities).HasConstraintName("FK_HousekeeperAvailability_Accounts");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.paymentId).HasName("PK__Payments__A0D9EFC6A1164265");

            entity.Property(e => e.createdDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.paymentDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.booking).WithMany(p => p.Payments).HasConstraintName("FK_Payments_Bookings");

            entity.HasOne(d => d.status).WithMany(p => p.Payments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Payments_PaymentStatuses");
        });

        modelBuilder.Entity<PaymentStatus>(entity =>
        {
            entity.HasKey(e => e.statusId).HasName("PK__PaymentS__36257A18AAD1283E");
        });

        modelBuilder.Entity<Promotion>(entity =>
        {
            entity.HasKey(e => e.code).HasName("PK__Promotio__357D4CF83363CF1A");

            entity.Property(e => e.createdDate).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.recordId).HasName("PK__Reports__D825195EEB2323A7");

            entity.HasOne(d => d.assign).WithMany(p => p.Reports)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reports_ScheduleAssignments");

            entity.HasOne(d => d.housekeeper).WithMany(p => p.Reports).HasConstraintName("FK_Reports_Accounts");
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.reviewId).HasName("PK__Reviews__2ECD6E0454B7838F");

            entity.Property(e => e.reviewDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.customer).WithMany(p => p.Reviews).HasConstraintName("FK_Reviews_Accounts");

            entity.HasOne(d => d.detail).WithMany(p => p.Reviews)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reviews_BookingDetails");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.roleId).HasName("PK__Roles__CD98462A043D3714");
        });

        modelBuilder.Entity<ScheduleAssignment>(entity =>
        {
            entity.HasKey(e => e.assignmentId).HasName("PK__Schedule__52C21820284DDA2B");

            entity.HasOne(d => d.detail).WithMany(p => p.ScheduleAssignments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ScheduleAssignments_BookingDetails");

            entity.HasOne(d => d.housekeeper).WithMany(p => p.ScheduleAssignments).HasConstraintName("FK_ScheduleAssignments_Accounts");

            entity.HasOne(d => d.status).WithMany(p => p.ScheduleAssignments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ScheduleAssignments_AssignmentStatuses");
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.HasKey(e => e.serviceId).HasName("PK__Services__455070DFBB3B52AC");

            entity.Property(e => e.createdDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.isActive).HasDefaultValue(true);

            entity.HasOne(d => d.category).WithMany(p => p.Services).HasConstraintName("FK_Services_Categories");
        });

        modelBuilder.Entity<ServiceDetail>(entity =>
        {
            entity.HasKey(e => e.serviceDetailId).HasName("PK__ServiceD__DF439C592C363168");

            entity.Property(e => e.IsActive).HasDefaultValue(true);

            entity.HasOne(d => d.service).WithMany(p => p.ServiceDetails).HasConstraintName("FK_ServiceDetail_Services");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}